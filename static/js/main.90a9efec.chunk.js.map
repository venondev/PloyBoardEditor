{"version":3,"sources":["Field.js","App.js","serviceWorker.js","index.js"],"names":["COLORS","DIRS","UP","UP_RIGHT","RIGHT","DOWN_RIGHT","DOWN","DOWN_LEFT","LEFT","UP_LEFT","DIR_SORTED","Object","values","TOKENS","rotate","dirs","map","dir","indexOf","length","fieldReducer","state","action","setToken","xCord","yCord","isWhite","row","y","item","x","type","console","log","currentToolIdx","undefined","Item","isSelected","onClick","style","background","className","key","transform","Toolbelt","toggleColor","setTool","erase","setErase","copyToClip","color","opacity","token","idx","join","e","Field","useReducer","Array","from","fields","dispatch","useState","str","el","document","createElement","value","setAttribute","position","left","body","appendChild","select","execCommand","removeChild","copyStringToClipboard","reduce","acc","rowAcc","binaryString","slice","reverse","includes","parseInt","toast","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90a9efec.chunk.js","sourcesContent":["import React, {useReducer, useState} from \"react\";\nimport {toast, ToastContainer} from \"react-toastify\";\n\nconst COLORS = {\n    WHITE: \"white\",\n    BLACK: \"black\"\n};\n\nconst DIRS = {\n    UP: \"0deg\",\n    UP_RIGHT: \"45deg\",\n    RIGHT: \"90deg\",\n    DOWN_RIGHT: \"135deg\",\n    DOWN: \"180deg\",\n    DOWN_LEFT: \"225deg\",\n    LEFT: \"270deg\",\n    UP_LEFT: \"315deg\"\n};\n\nconst DIR_SORTED = Object.values(DIRS);\n\nconst TOKENS = [\n    [DIRS.UP],\n    [DIRS.UP, DIRS.DOWN],\n    [DIRS.UP_LEFT, DIRS.UP_RIGHT],\n    [DIRS.UP, DIRS.UP_LEFT],\n    [DIRS.UP, DIRS.UP_RIGHT, DIRS.UP_LEFT],\n    [DIRS.DOWN, DIRS.UP_RIGHT, DIRS.UP_LEFT],\n    [DIRS.DOWN, DIRS.RIGHT, DIRS.LEFT],\n    [DIRS.UP_RIGHT, DIRS.DOWN_RIGHT, DIRS.DOWN_LEFT, DIRS.UP_LEFT]\n];\n\nconst getInitialField = () => {\n    return Array.from(new Array(9), () => Array.from(new Array(9), () => ({})));\n};\n\nconst rotate = dirs => dirs.map((dir) => DIR_SORTED[(DIR_SORTED.indexOf(dir) + 1) % (DIR_SORTED.length)])\n\nconst fieldReducer = (state, action) => {\n\n    const setToken = (xCord, yCord, dirs, isWhite) =>\n        state.map((row, y) => row.map((item, x) => yCord === y && xCord === x ? {\n            dirs,\n            isWhite\n        } : item));\n\n    switch (action.type) {\n        case \"FIELD_CLICK\": {\n            console.log(state[action.y][action.x]?.dirs)\n\n            if (state[action.y][action.x]?.dirs) {\n                console.log(rotate(state[action.y][action.x].dirs));\n                return setToken(action.x, action.y, rotate(state[action.y][action.x].dirs), action.isWhite)\n            } else {\n                return setToken(action.x, action.y, TOKENS[action.currentToolIdx], action.isWhite)\n            }\n        }\n        case \"FIELD_ERASE\": {\n            return setToken(action.x, action.y, undefined, false);\n        }\n        default:\n            return state;\n    }\n};\n\nconst Item = ({dirs = [], isWhite, isSelected, onClick}) => {\n    return (\n        <div onClick={onClick} style={{background: isWhite ? COLORS.WHITE : COLORS.BLACK}} className={`item ${!dirs.length && \"empty\"} ${isSelected ? \"selected\" : \"\"}`}>\n        {dirs.map(dir =>\n            <div key={\"item\" + dir} style={{transform: `rotate(${dir})`}} className=\"line\"></div>\n        )}\n    </div>)\n};\n\nconst Toolbelt = ({isWhite, toggleColor, currentToolIdx, setTool, erase, setErase, copyToClip}) => {\n\n    return (<div onClick={() => erase && setErase(false)} className={`toolbelt`}>\n        <div onClick={() => toggleColor(color => !color)}\n             className={`colorpicker ${isWhite ? COLORS.WHITE : COLORS.BLACK}`}>\n        </div>\n        <div style={{opacity: erase ? \"0.2\" : \"1\"}}>\n            {TOKENS.map((token, idx) => <Item\n                key={`toolbelt-${token.join()}`}\n                isSelected={idx === currentToolIdx}\n                onClick={() => setTool(idx)}\n                dirs={token}\n                isWhite={isWhite}\n            />)}\n        </div>\n        <div onClick={() => setErase(e => !e)} className={`erase ${erase && \"active\"}`}></div>\n\n        <button className=\"copybtn\" onClick={copyToClip}>Copy to clipboard</button>\n    </div>)\n\n};\n\nfunction copyStringToClipboard (str) {\n    // Temporäres Element erzeugen\n    var el = document.createElement('textarea');\n    // Den zu kopierenden String dem Element zuweisen\n    el.value = str;\n    // Element nicht editierbar setzen und aus dem Fenster schieben\n    el.setAttribute('readonly', '');\n    el.style = {position: 'absolute', left: '-9999px'};\n    document.body.appendChild(el);\n    // Text innerhalb des Elements auswählen\n    el.select();\n    // Ausgewählten Text in die Zwischenablage kopieren\n    document.execCommand('copy');\n    // Temporäres Element löschen\n    document.body.removeChild(el);\n}\n\nconst Field = () => {\n    const [fields, dispatch] = useReducer(fieldReducer, getInitialField())\n    const [isWhite, toggleColor] = useState(true);\n    const [currentToolIdx, setTool] = useState(0);\n    const [erase, setErase] = useState(false);\n\n    const copyFieldToClipboard = () => {\n        const ret = fields.reduce((acc, row, y) => acc + row.reduce((rowAcc, item, x) => {\n            if(item && item.dirs) {\n                const binaryString = DIR_SORTED.slice().reverse().map(x => item.dirs.includes(x) ? \"1\" : \"0\").join(\"\");\n                const color = item.isWhite ? \"w\" : \"b\";\n\n                return rowAcc + `${color}${parseInt(binaryString, 2)}${x === row.length - 1 ? \"\" : \",\"}`\n            } else {\n                return rowAcc + \",\";\n            }\n\n        }, \"\") + (y === fields.length - 1 ? \"\" : \"/\"), \"\")\n        copyStringToClipboard(ret);\n        toast(\"Copied to clipboard\");\n    };\n\n    return (<div className=\"main\">\n        <div>\n            <Toolbelt\n                currentToolIdx={currentToolIdx}\n                setTool={setTool}\n                isWhite={isWhite}\n                toggleColor={toggleColor}\n                erase={erase}\n                setErase={setErase}\n                copyToClip={copyFieldToClipboard}\n            />\n        </div>\n        <div>\n            {fields.map((row, y) => (\n                <div className=\"row\" key={y}>\n                    {row.map((item, x) => <Item\n                        onClick={() => erase\n                            ? dispatch({ type: \"FIELD_ERASE\", x, y })\n                            : dispatch({ type: \"FIELD_CLICK\", isWhite, currentToolIdx, x, y })\n                        }\n                        key={x}\n                        {...item}\n                    />)}\n                </div>\n            ))}\n        </div>\n        <ToastContainer />\n    </div>)\n};\n\nexport default Field;","import React from 'react';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './App.css';\nimport Field from \"./Field\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <Field/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}